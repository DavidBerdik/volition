package com.recoveryenhancementsolutions.volition;

import android.app.Application;
import android.arch.lifecycle.AndroidViewModel;
import android.arch.lifecycle.LiveData;
import android.os.AsyncTask;
import java.util.Calendar;
import java.util.Date;

/**
 * Class manages relationship between the TreatmentPlanActivity and the Volition Database.
 */
public class TreatmentPlanViewModel extends AndroidViewModel {

  /**
   * Constructor method to initialize a new TreatmentPlanViewModel
   *
   * @param application The application creating the TreatmentPlanViewModel.
   */
  public TreatmentPlanViewModel(final Application application) {
    super(application);
    db = VolitionDatabase.getDatabase(this.getApplication());
    treatmentPlanDao = db.treatmentPlanDao();
  }

  /**
   * Inserts a new treatmentPlanEntity into the database. Static method for insertion of the
   * treatmentPlan from another class.
   *
   * @param treatmentPlanEntity The new treatment plan to be inserted.
   */
  public  void insertTreatmentPlan(TreatmentPlanEntity treatmentPlanEntity) {
    new insertAsyncTask(db.treatmentPlanDao()).execute(treatmentPlanEntity);
  }

  /**
   * Inserts a new treatment plan into the database.
   */
  public void updateTreatmentPlan(TreatmentPlanEntity treatmentPlanEntity) {
    new updateAsyncTask(treatmentPlanDao).execute(treatmentPlanEntity);
  }

  /**
   * Sets a test database for the ViewModel. This should only be used for unit testing this
   * ViewModel.
   *
   * @param db The VolitionDatabase to use for testing the ViewModel
   */
  public void setTestDatabase(final VolitionDatabase db) {
    this.db.close();
    this.db = db;
    treatmentPlanDao = this.db.treatmentPlanDao();
  }

  /**
   * Returns the live data object containing the treatment plan.
   *
   * @return A live data object containing a treatmentPlanEntity.
   */
  public LiveData<TreatmentPlanEntity> getTreatmentPlan() {
    return db.treatmentPlanDao().getTreatmentPlan();
  }

  /**
   * Generates a new Treatment plan.
   *
   * @param medicationChoiceEntity A MedicationChoiceEntity containing the user's medication
   * choice.
   * @param severityLevel A String representing the user's severity level.
   * @return A TreatmentPlanEntity generated by this method.
   */
  public static TreatmentPlanEntity generateTreatmentPlan(
      MedicationChoiceEntity medicationChoiceEntity, String severityLevel) {

    final String medicationChoice = medicationChoiceEntity.medication;

    //A new treatmentPlanEntity to add to the database
    final TreatmentPlanEntity newTreatmentPlan = new TreatmentPlanEntity();

    switch (severityLevel) {
      case "MILD":  //There is no mild Buprenorphine plan currently
        newTreatmentPlan.setNumCounseling(1);
        newTreatmentPlan.setNumSupportMeeting(1);
        newTreatmentPlan.setNumLessons(1);
        newTreatmentPlan.setNumTreatmentEffectivenessAssessment(1);
        newTreatmentPlan.setNumOutcomeMeasures(1);
        newTreatmentPlan.setNumTimeTracking(1);
        newTreatmentPlan.setNumReadingResponse(1);
        newTreatmentPlan.setNumMedManagement(0);
        newTreatmentPlan.setMedManagementMonthly();
        newTreatmentPlan.setOutcomeMeasureWeekly();
        //handles differences in treatment plans
        if (medicationChoice.equals("ABSTAIN")) {
          newTreatmentPlan.setNumMedManagement(0);
        } else {
          newTreatmentPlan.setNumMedManagement(2);
        }
        break;
      case "MODERATE":
        newTreatmentPlan.setNumCounseling(3);
        newTreatmentPlan.setNumSupportMeeting(3);
        newTreatmentPlan.setNumLessons(2);
        newTreatmentPlan.setNumTreatmentEffectivenessAssessment(1);
        newTreatmentPlan.setNumOutcomeMeasures(3);
        newTreatmentPlan.setNumTimeTracking(2);
        newTreatmentPlan.setNumReadingResponse(2);
        newTreatmentPlan.setMedManagementMonthly();
        newTreatmentPlan.setOutcomeMeasureDaily();

        //handles differences in treatment plans
        if (medicationChoice.equals("ABSTAIN")) {
          newTreatmentPlan.setNumMedManagement(0);
        } else {
          newTreatmentPlan.setNumMedManagement(2);
        }
        break;
      case "SEVERE":  //Severe severity level
        newTreatmentPlan.setNumCounseling(5);
        newTreatmentPlan.setNumSupportMeeting(5);
        newTreatmentPlan.setNumLessons(3);
        newTreatmentPlan.setNumTreatmentEffectivenessAssessment(1);
        newTreatmentPlan.setNumOutcomeMeasures(5);
        newTreatmentPlan.setNumTimeTracking(5);
        newTreatmentPlan.setNumReadingResponse(3);
        newTreatmentPlan.setMedManagementWeekly();
        newTreatmentPlan.setOutcomeMeasureDaily();

        //handles differences in treatment plans
        if (medicationChoice.equals("ABSTAIN")) {
          newTreatmentPlan.setNumMedManagement(0);
        } else {
          newTreatmentPlan.setNumMedManagement(1);
        }
        break;
      default:  //default case
        newTreatmentPlan.setNumCounseling(7);
        newTreatmentPlan.setNumSupportMeeting(7);
        newTreatmentPlan.setNumLessons(7);
        newTreatmentPlan.setNumTreatmentEffectivenessAssessment(7);
        newTreatmentPlan.setNumOutcomeMeasures(7);
        newTreatmentPlan.setNumTimeTracking(7);
        newTreatmentPlan.setNumReadingResponse(7);
        newTreatmentPlan.setMedManagementWeekly();
        newTreatmentPlan.setOutcomeMeasureDaily();

        //handles differences in treatment plans
        if (medicationChoice.equals("ABSTAIN")) {
          newTreatmentPlan.setNumMedManagement(0);
        } else {
          newTreatmentPlan.setNumMedManagement(1);
        }
        break;
    }
    //Set time and update cool-down information. NOTE: cool down must be positive
    //Time is initially set back 1 day to allow the user to modify their treatment plan for the
    //first time.
    int coolDownTime = 8;
    final Calendar calendar = Calendar.getInstance();
    calendar.add(Calendar.DAY_OF_MONTH, -1);
    calendar.add(Calendar.HOUR_OF_DAY, -1 * coolDownTime);
    final Date date = calendar.getTime();

    //Change the value here to modify the amount of time between modifications to the treatment plan
    newTreatmentPlan.setCoolDownTime(coolDownTime);

    newTreatmentPlan.setLastUpdate(date);

    //Passes the new treatment plan to the Treatment plan view model for insertion
    return newTreatmentPlan;
  }

  /**
   * Used to insert data into the database asynchronously
   */
  private static class insertAsyncTask extends AsyncTask<TreatmentPlanEntity, Void, Void> {

    insertAsyncTask(final TreatmentPlanDao dao) {
      asyncTaskDao = dao;
    }

    @Override
    protected Void doInBackground(final TreatmentPlanEntity... params) {
      asyncTaskDao.insertTreatmentPlanEntity(params[0]);
      return null;
    }

    private final TreatmentPlanDao asyncTaskDao;
  }

  /**
   * Used to update data into the database asynchronously
   */
  private static class updateAsyncTask extends AsyncTask<TreatmentPlanEntity, Void, Void> {

    updateAsyncTask(final TreatmentPlanDao dao) {
      asyncTaskDao = dao;
    }

    @Override
    protected Void doInBackground(final TreatmentPlanEntity... params) {
      asyncTaskDao.updateTreatmentPlanEntity(params[0]);
      return null;
    }

    private final TreatmentPlanDao asyncTaskDao;
  }

  /**
   * The apps loaded Database.
   */
  private VolitionDatabase db;

  /**
   * The treatmentPlan's Dao
   */
  private TreatmentPlanDao treatmentPlanDao;

}